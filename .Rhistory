shiny::runApp()
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(iris)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(dplyr)
library(kernlab)
library(randomForest)
library(caret)
data(iris)
set.seed(1411)
inTrain <-  createDataPartition(y = iris$Species,p=0.80,list=FALSE)
training <- iris[inTrain,]
testing  <- iris[-inTrain,]
modelRF <- train(Species ~ ., data=training,method="rf",
prox=TRUE,allowParallel=TRUE)
predict(modelRF,
c(Sepal.Length=4.5, Sepal.Width=4.5,Petal.Length=4.5, Petal.Width=4.5)
)
t1 <-c(Sepal.Length=4.5, Sepal.Width=4.5,Petal.Length=4.5, Petal.Width=4.5)
class(t1)
t2 <- testing[1,]
class(t1)
print(t1)
levels(t2)
levels(t1)
names(t1)
names(t2)
predict(modelRF,as.data.frame(t1))
predict(modelRF,t2
)
predict(modelRF,t2[-Species])
predict(modelRF,t2[1:4])
predict(modelRF,t2[1:3])
t1 <-numeric(Sepal.Length=4.5, Sepal.Width=4.5,Petal.Length=4.5, Petal.Width=4.5)
t1 <-data.frame(Sepal.Length=4.5, Sepal.Width=4.5,Petal.Length=4.5, Petal.Width=4.5)
predict(modelRF,t1)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
predict(modelRF,t1)
predict(modelRF,t1)[1]
t3 <- predict(modelRF,t1)
t3
as.character(t3)
shiny::runApp()
as.character(t3)
class(t3)
print(t3)
print(as.character(t3))
print(as.character(t3[[1]]))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
levels(testing$Species)
install.packages("klaR")
modelNB = train(Species ~ ., data=training,method="nb",
prox=TRUE,allowParallel=TRUE)
predict(modeNB,testing[1,])
predict(modelNB,testing[1,])
modelNN = train(Species ~ ., data=training,method="knn",k=1,
prox=TRUE,allowParallel=TRUE)
modelT = train(Species ~ ., data=training,method="rpart",
prox=TRUE,allowParallel=TRUE)
modelT = train(Species ~ ., data=training,method="rpart",cp=0.002,maxdepth=8,
prox=TRUE,allowParallel=TRUE)
modelT = train(Species ~ ., data=training,method="rpart",cp=0.002,maxdepth=8)
predict(modelT,testing[1,])
modelT = train(Species ~ ., data=training,method="rpart")
predict(modelT,testing[1,])
modelNN = train(Species ~ ., data=training,method="knn",k=1)
modelNN = train(Species ~ ., data=training,method="knn",k=1,
trControl=ctrl, metric="Accuracy", tuneLength=20,
preProc=c("range"))
ctrl <- trainControl(method="repeatedcv", number=10, repeats=3,
classProbs=TRUE, summaryFunction=twoClassSummary)
modelNN = train(Species ~ ., data=training,method="knn",
trControl=ctrl, metric="Accuracy", tuneLength=20,
preProc=c("range"))
install.packages("pROC")
modelNN = train(Species ~ ., data=training,method="knn",
trControl=ctrl, metric="Accuracy", tuneLength=20,
preProc=c("range"))
ctrl <- trainControl(method="repeatedcv", number=10, repeats=3)
modelNN = train(Species ~ ., data=training,method="knn",
trControl=ctrl, metric="Accuracy", tuneLength=20,
preProc=c("range"))
predict(modelNN,testing[1,])
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?all
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
levels(iris$Species)
t4 <- c(setosa=1,versicolor=2,virginica=3)
t
t4
t4["versicolor"]
t4[["versicolor"]]
t4[predict(modelNN,testing[1,])]
t4[predict(modelNN,testing[30,])]
t4[predict(modelNN,testing[60,])]
t4[predict(modelNN,testing[40,])]
t4[predict(modelNN,testing[25,])]
shiny::runApp()
t4[predict(modelNN,testing[25,])]
shiny::runApp()
shiny::runApp()
t4[predict(modelRF,testing[1,])]
pred <- predict(modelRF,testing[1,])
t4[pred]
images <- c(setosa    ='./Kosaciec_szczecinkowaty_Iris_setosa.jpg',
versicolor='./File-Iris_versicolor_3.jpg',
virginica ='./220px-Iris_virginica.jpg',
none      ='./iris_petal_sepal_1.png')
images[pred]
images[[pred]
]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
img(normalizePath(file.path('iris_petal_sepal_1.png')))
shiny::runApp()
shiny::runApp()
ls
ls()
img(normalizePath(file.path('iris_petal_sepal_1.png')))
```
img(src=normalizePath('file.path('iris_petal_sepal_1.png')))
shiny::runApp()
Here you will find help
title: "Help"
shiny::runApp()
shiny::runApp()
shiny::runApp()
![Sepal and petal](iris_petal_sepal_1.png)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
"www/"
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
