{
    "contents" : "library(caret)\n\nset.seed(1411)\n\ndata(iris)\n\ninTrain <-  createDataPartition(y = iris$Species,p=0.80,list=FALSE)\ntraining <- iris[inTrain,]\ntesting  <- iris[-inTrain,]\n\nimages <- c(setosa    ='Kosaciec_szczecinkowaty_Iris_setosa.jpg',\n            versicolor='220px-Iris_versicolor_3.jpg',\n            virginica ='220px-Iris_virginica.jpg',\n            none      ='iris_petal_sepal.png')\n\nctrl <- trainControl(method=\"repeatedcv\", number=10, repeats=3)\n\n# Training models takes a relative long time\nmodels <- list(\n    modelRF  = train(Species ~ ., data=training,method=\"rf\",\n                prox=TRUE,allowParallel=TRUE),\n    modelT   = train(Species ~ ., data=training,method=\"rpart\"),\n    modelKNN = train(Species ~ ., data=training,method=\"knn\",\n                    trControl=ctrl, metric=\"Accuracy\", tuneLength=20,\n                    preProc=c(\"range\"))\n            )            \n\nshinyServer(function(input, output, session) {\n    output$testing <- renderDataTable(testing, options=list(pageLength=10))\n    output$training <- renderDataTable(training, options=list(pageLength=10)\n)\n\n    output$prediction <- renderUI({\n        input$goButton\n#         if(input$resetButton){\n#             inputDF <- testing[sample(1:length(testing), 1),] #Random sample from testing set\n#             updateNumericInput(session,\"sl\",value=inputDF[[1]])\n#             updateNumericInput(session,\"sw\",value=inputDF[[2]])\n#             updateNumericInput(session,\"pl\",value=inputDF[[3]])\n#             updateNumericInput(session,\"pw\",value=inputDF[[4]])\n#         }\n        inputDF <- isolate(data.frame(Sepal.Length=input$sl, Sepal.Width=input$sw,\n                                      Petal.Length=input$pl, Petal.Width=input$pw))\n        \n        if(!all(inputDF==0.0)){\n            pred <- as.character( predict(models[as.integer(isolate(input$select))], \n                                          inputDF)[[1]])\n            output$irisImg <- renderUI(img(src=images[[pred]]))\n            h1(\"Classified as: \",pred)\n        } else {\n            output$irisImg <- renderUI(img(src=images[[\"none\"]]))\n            p(h1(\"Enter data\"),\n              h2(\"No zeros\")\n              )\n        }\n        })   \n\n})",
    "created" : 1434125599288.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3885810810",
    "id" : "545A70DF",
    "lastKnownWriteTime" : 1434357881,
    "path" : "F:/workspace/R/devdataprod015/irisclassify/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}